version: '3.9'
services:
  nginx-proxy:
    restart: always
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    environment:
      - "TRUST_DOWNSTREAM_PROXY=true"
    networks:
      - keats 
    volumes:
      - "/etc/nginx/vhost.d"
      - "/usr/share/nginx/html"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "/etc/nginx/certs"

  nginx-proxy-encrypt:
    restart: always
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    volumes_from:
      - "nginx-proxy"
    networks:
      - keats 
  app:
    container_name: go
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - PORT=${PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DB=${DB_DB}
      - DB_HOST=postgresdb
      - VIRTUAL_HOST=api.keats.app
      - LETSENCRYPT_HOST=api.keats.app
    tty: true
    build: .
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - postgresdb
    env_file:
      - .env
    networks:
      - keats 

  postgresdb:
    image: postgres:14.3
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB} 
    ports:
      - '5432:5432'
    env_file:
      - .env
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - keats 

  meilisearch:
    container_name: meilisearch
    image: getmeili/meilisearch:v1.1.1
    environment:
      - MEILI_MASTER_KEY=${MEILISEARCH_MASTER_KEY:-masterKey}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS:-true}
      - MEILI_ENV=${MEILI_ENV:-development}
      - MEILI_LOG_LEVEL
      - MEILI_DB_PATH=${MEILI_DB_PATH:-/data.ms}
    ports:
      - "127.0.0.1:7700:7700"
    networks:
      - keats 
    volumes:
      - ./data.ms:/data.ms
    restart: unless-stopped


volumes:
  pg_data:

# Networks to be created to facilitate communication between containers
networks:
  keats:
    driver: bridge